{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","components/header.jsx","App.js","components/content.jsx","components/test.jsx","serviceWorker.js","index.js"],"names":["NavBar","props","react_default","a","createElement","className","countValue","Counter","state","count","value","_this2","this","counter","console","log","getBadgeClass","formatCount","onClick","onIncrement","onDecrement","handleDel","id","Component","Counters","_this","counters","onReset","map","components_counter","key","onDelete","Header","href","Content","class","src","alt","Test","Fragment","header","content","Boolean","window","location","hostname","match","ReactDOM","render","test","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OASeA,SAPA,SAAAC,GACb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBAAhB,UAA+CJ,EAAMK,eC2C5CC,6MA7CbC,MAAQ,CACNC,MAAO,8EAGGC,GAEV,OAAiB,IAAVA,EAAc,OADPA,wCAGFA,GAEZ,MADc,oBACe,IAAVA,EAAc,UAAY,4CAEtC,IAAAC,EAAAC,KACDC,EAAUD,KAAKX,MAAMY,QAE3B,OADAC,QAAQC,IAAIF,EAAQH,OAElBR,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAWO,KAAKI,cAAcH,EAAQH,QACzC,IACAE,KAAKK,YAAYJ,EAAQH,QAE5BR,EAAAC,EAAAC,cAAA,UACEC,UAAU,2BACVa,QAAS,kBAAMP,EAAKV,MAAMkB,YAAYR,EAAKV,MAAMY,WAFnD,aAOAX,EAAAC,EAAAC,cAAA,UACEC,UAAU,0BACVa,QAAS,kBAAMP,EAAKV,MAAMmB,YAAYP,KAFxC,aAMAX,EAAAC,EAAAC,cAAA,UACEC,UAAU,4BACVa,QAAS,kBAAMP,EAAKV,MAAMoB,UAAUV,EAAKV,MAAMY,QAAQS,MAFzD,kBAnCcC,aC4BPC,mLA1BJ,IAAAC,EAAAb,KACDc,EAAWd,KAAKX,MAAMyB,SAE5B,OACExB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEc,QAASN,KAAKX,MAAM0B,QACpBtB,UAAU,8BAFZ,SAOCqB,EAASE,IAAI,SAAAf,GAAO,OACnBX,EAAAC,EAAAC,cAACyB,EAAD,CACEC,IAAKjB,EAAQS,GACbT,QAASA,EACTO,YAAaK,EAAKxB,MAAMmB,YACxBD,YAAaM,EAAKxB,MAAMkB,YACxBE,UAAWI,EAAKxB,MAAM8B,qBAnBXR,aCmBRS,GClBGT,kMDAd,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,SACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OACZH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAG6B,KAAK,SAAR,SAEF/B,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAG6B,KAAK,UAAR,oBAXOV,cEwBNW,mLAtBX,OACEhC,EAAAC,EAAAC,cAAA,WAAS+B,MAAM,aACbjC,EAAAC,EAAAC,cAAA,OAAK+B,MAAM,aACTjC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,2CACAF,EAAAC,EAAAC,cAAA,wOAMAF,EAAAC,EAAAC,cAAA,KAAG6B,KAAK,IAAIE,MAAM,OAAlB,cAIFjC,EAAAC,EAAAC,cAAA,OAAKgC,IAAI,wCAAwCC,IAAI,cAjBzCd,aCYPe,mLATX,OACEpC,EAAAC,EAAAC,cAACF,EAAAC,EAAMoC,SAAP,KACErC,EAAAC,EAAAC,cAACoC,EAAD,MACAtC,EAAAC,EAAAC,cAACqC,EAAD,cALWlB,aCSCmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAAUC,SAASC,eAAe,SD0H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9e1f8b15.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nconst NavBar = props => {\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <span className=\"navbar-brand mb-0 h1\">Navbar {props.countValue}</span>\r\n    </nav>\r\n  );\r\n};\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  state = {\r\n    count: 0\r\n  };\r\n\r\n  formatCount(value) {\r\n    const count = value;\r\n    return value === 0 ? \"Zero\" : count;\r\n  }\r\n  getBadgeClass(value) {\r\n    let classes = \"badge m-2 badge-\";\r\n    return (classes += value === 0 ? \"warning\" : \"primary\");\r\n  }\r\n  render() {\r\n    const counter = this.props.counter;\r\n    console.log(counter.value);\r\n    return (\r\n      <div>\r\n        <span className={this.getBadgeClass(counter.value)}>\r\n          {\" \"}\r\n          {this.formatCount(counter.value)}\r\n        </span>\r\n        <button\r\n          className=\"btn btn-secendary btn-sm\"\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n        >\r\n          Increment\r\n        </button>\r\n\r\n        <button\r\n          className=\"btn btn-info btn-sm m-2\"\r\n          onClick={() => this.props.onDecrement(counter)}\r\n        >\r\n          Decrement\r\n        </button>\r\n        <button\r\n          className=\"btn btn-danger btn-sm m-2\"\r\n          onClick={() => this.props.handleDel(this.props.counter.id)}\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  render() {\r\n    const counters = this.props.counters;\r\n\r\n    return (\r\n      <div>\r\n        <button\r\n          onClick={this.props.onReset}\r\n          className=\"btn btn-primary btn-sm m-2\"\r\n        >\r\n          Reset\r\n        </button>\r\n\r\n        {counters.map(counter => (\r\n          <Counter\r\n            key={counter.id}\r\n            counter={counter}\r\n            onDecrement={this.props.onDecrement}\r\n            onIncrement={this.props.onIncrement}\r\n            handleDel={this.props.onDelete}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import \"./styles.css\";\r\nimport React, { Component } from \"react\";\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar\">\r\n        <div className=\"container\">\r\n          <h1 className=\"logo\">Phono</h1>\r\n          <ul className=\"nav\">\r\n            <li>\r\n              <a href=\"#home\">Home</a>\r\n            </li>\r\n            <li>\r\n              <a href=\"#about\">About</a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import \"./App.css\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\nimport React, { Component } from \"react\";\nclass App extends Component {\n  state = {\n    counters: [{ id: 1, value: 2 }, { id: 2, value: 0 }, { id: 3, value: 0 }]\n  };\n  handleDec = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    if (counters[index].value !== 0) {\n      counters[index].value = counters[index].value - 1;\n    }\n    this.setState({ counters });\n  };\n  onReset = () => {\n    const counters = [...this.state.counters];\n    for (let i = 0; i < counters.length; i++) {\n      counters[i].value = 0;\n    }\n    this.setState({ counters });\n  };\n  handleInc = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n  };\n  handleDel = counterID => {\n    console.log(\"In \" + counterID);\n    const counters = this.state.counters.filter(function(counter) {\n      return counterID !== counter.id;\n    });\n    console.log(counters);\n    this.setState({ counters });\n    // this.state.counters.filter()\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar countValue={this.state.counters.length} />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onIncrement={this.handleInc}\n            onDecrement={this.handleDec}\n            onDelete={this.handleDel}\n            onReset={this.onReset}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import \"./styles.css\";\r\nimport React, { Component } from \"react\";\r\nclass Content extends Component {\r\n  render() {\r\n    return (\r\n      <section class=\"section-a\">\r\n        <div class=\"container\">\r\n          <div>\r\n            <h1>The headphones of the future.</h1>\r\n            <p>\r\n              Lorem ipsum dolor sit amet consectetur adipisicing elit. Quo\r\n              repudiandae rerum libero ipsum asperiores omnis mollitia, nostrum\r\n              commodi placeat ea itaque modi corrupti corporis nam voluptas aut\r\n              reprehenderit eaque culpa.\r\n            </p>\r\n            <a href=\"#\" class=\"btn\">\r\n              Read More\r\n            </a>\r\n          </div>\r\n          <img src=\"https://i.ibb.co/37Y74kv/showcase.jpg\" alt=\"\" />\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","import React, { Component } from \"react\";\r\nimport Header from \"./header.jsx\";\r\nimport Content from \"./content\";\r\nclass Test extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Header />\r\n        <Content />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Test;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport Test from \"./components/test\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nReactDOM.render(<Test />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}